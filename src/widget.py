# widget.py
def mask_account_card(account_info: str) -> str:
    """
    Замаскировать номер банковской карты или счета.  Если входная строка начинается со слова "Счет",
    функция считает, что это номер счета и маскирует его, оставляя только последние 4 цифры.
    Если это просто информация о карте, функция маскирует номер карты, оставляя только
    первые 4 и последние 4 цифры.
    Аргументы: account_info (str): Входная строка с номером карты или счета.
    Возвращает: str: Замаскированный номер карты или счета.
    """
    if account_info.startswith("Счет "):
        # Обрабатываем счет
        account_number = account_info[5:]  # Убираем "Счет "
        masked_number = '**' + account_number[-4:]  # Маскируем все, кроме последних 4 цифр
        return f"Счет {masked_number}"
    else:
        # Обрабатываем карты
        card_number = account_info.split()[-1]  # Получаем номер карты (последняя часть строки)
        masked_number = f"{card_number[:4]} {card_number[4:6]}** **** {card_number[-4:]}"  # Форматируем номер карты
        return f"{account_info.split()[0]} {masked_number}"  # Возвращаем с типом карты


def get_date(time_string: str) -> str:
    """
    Преобразует временную метку из строки в формат ДД.ММ.ГГГГ.  Строка должна быть в формате
     "YYYY-MM-DDTHH:MM:SS.ssssss".
    Аргумент: time_sting (str): Временная метка в формате ISO 8601.
    Возвращает: str: Дата в формате ДД.ММ.ГГГГ.
    """
    # Разделяем строку по символу 'T'
    date_str = time_string.split('T')[0]  # Берем только нужную часть даты
    # Разделяем дату на год, месяц и день
    year, month, day = date_str.split('-')
    # Возвращаем дату в нужном формате
    return f"{day}.{month}.{year}"


# Примеры работы функций
#if __name__ == "__main__":
#print(mask_account_card("Visa Platinum 7000792289606361"))  # Пример использования маскирования карты
#print(mask_account_card("Счет 73654108430135874305"))  # Пример использования маскирования счета
#print(get_date("2024-03-11T02:26:18.671407"))  # Пример преобразования даты
